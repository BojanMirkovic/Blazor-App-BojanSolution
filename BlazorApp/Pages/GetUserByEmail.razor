@page "/user-Email"
@using Domain_Layer.Models.User
@using Shared_Layer.ApiServices.UserCRUD
@using Shared_Layer.ApiServices.Authentication
@using Shared_Layer.DTO_s.User
@inject IUserServices ApiService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
<h3>Get User By Email</h3>

<EditForm Model="model" OnValidSubmit="OnSubmit" class="card card-body bg-light mt-5">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="col-form-label">
        <InputText @bind-Value="model.Email" placeholder="Email" class="form-control mb-3" />
        <ValidationMessage For="@(() => model.Email)" />
    </div>
    <button class="btn btn-primary mt-3">Get Users Data</button>
</EditForm>

@if (isLoading)
{
    <div class="mt-4 text-center">
        <!-- You can use a spinner component or simple message -->
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading</span>
        </div>
        <p>Loading data, please wait...</p>
    </div>
}

@if (showError)
{
    <div class="alert alert-danger">
        @errorMesage
    </div>
}

@if (userModel != null && !isLoading)
{
    <div class="container mt-5">
        <table class="table table-bordered table-striped mt-4">

            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Role</th>
                    <th>Is Deleted</th>
                    <th>Id</th>
                    <th>User Name</th>
                    <th>Email</th>
                    <th>Phone Number</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@userModel.FirstName</td>
                    <td>@userModel.LastName</td>
                    <td>@userModel.Role</td>
                    <td>@userModel.IsDeleted</td>
                    <td>@userModel.Id</td>
                    <td>@userModel.UserName</td>
                    <td>@userModel.Email</td>
                    <td>@userModel.PhoneNumber</td>
                </tr>
            </tbody>
        </table>
    </div>
}


@code {
    private UserEmailDTO model = new();
    private UserModel userModel;
    private string? errorMesage;
    private bool showError = false;
    private bool isAdmin = false;
    private bool isLoading = false; // Loading state

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAdmin = user.IsInRole("Admin");

        if (!isAdmin)
        {
            // Redirect to an unauthorized page or home
            NavigationManager.NavigateTo("/unauthorized");
        }

    }
    private async Task OnSubmit()
    {
        isLoading = true; // Set loading state to true
   
        try
        {
            // Simulate a delay for demonstration 
            //await Task.Delay(500);

            // Fetch user data and assign it to the model
            userModel = await ApiService.GetUserByEmailAsync(model.Email);
            showError = false;  // Clear error state if successful
            model = new();
        }
        catch (Exception ex)
        {
            showError = true;
            errorMesage = $"There is a problem in fetching data for user with Email: {model.Email}. {ex.Message}";
        }
        finally
        {
            isLoading = false; // Stop loading
        }
    }

}
