@page "/users"
@using Shared_Layer.ApiServices.UserCRUD
@using Shared_Layer.ApiServices.Authentication
@using Domain_Layer.Models.User
@inject IUserServices ApiService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle> Get All Users </PageTitle>

<EditForm Model ="@searchQuery" class="container mt-4" OnValidSubmit="PerformSearch">
    <h2 class="text-center mb-4">User Information</h2>

    <div class="row mb-3">
        <div class="col-md-6">
            <div class="input-group">
                <InputText @bind-Value="searchQuery" class="form-control" placeholder="Search Users..." />
                <button class="btn btn-primary" type="submit">Search</button>
            </div>
        </div>
    </div>

@if (result == null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (filteredResult == null || !filteredResult.Any())
{
    <div class="alert alert-danger text-center">
        No users found. User doesn't exist.
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover table-bordered shadow-sm">
            <thead class="table-dark">
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Email</th>
                    <th>Role</th>
                    <th>ID</th>
                    <th>isDeleted</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in filteredResult)
                {
                    <tr @onclick="() => ShowUserDetails(user)" style="cursor:pointer;">
                        <td>@user.FirstName</td>
                        <td>@user.LastName</td>
                        <td>@user.Email</td>
                        <td>
                            <span class="@GetRoleBadgeClass(user.Role)">
                                @user.Role
                            </span>
                        </td>
                        <td>@user.Id</td>
                        <td>@user.IsDeleted</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
@if (selectedUser != null)
{
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">User Details: @selectedUser.UserName</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <p><strong>First Name:</strong> @selectedUser.FirstName</p>
                            <p><strong>Last Name:</strong> @selectedUser.LastName</p>
                            <p><strong>Email:</strong> @selectedUser.Email</p>
                            <p><strong>Role:</strong> @selectedUser.Role</p>
                            <p><strong>ID:</strong> @selectedUser.Id</p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Phone Number:</strong> @selectedUser.PhoneNumber ?? "N/A"</p>
                            <p><strong>Two-Factor Enabled:</strong> @selectedUser.TwoFactorEnabled.ToString()</p>
                            <p><strong>Username:</strong> @selectedUser.UserName</p>
                            <p><strong>Is Deleted:</strong> @selectedUser.IsDeleted</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}
</EditForm>





@code {
    IEnumerable<UserModel>? result;
    IEnumerable<UserModel>? filteredResult;
    UserModel? selectedUser;
    string searchQuery = "";
    private bool isAdmin = false;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAdmin = user.IsInRole("Admin");

        if(!isAdmin)
        {
            // Redirect to an unauthorized page or home
            NavigationManager.NavigateTo("/unauthorized");
        }
        result = await ApiService.GetAllUsersAsync();
        filteredResult = result.OrderBy(u => u.FirstName); // Show all users by default
    }

    void ShowUserDetails(UserModel user)
    {
        selectedUser = user;
    }

    void CloseModal()
    {
        selectedUser = null;
    }

    void PerformSearch()
    {
        if (!string.IsNullOrEmpty(searchQuery))
        {
            filteredResult = result?.Where(u =>
                u.FirstName.StartsWith(searchQuery, StringComparison.OrdinalIgnoreCase))
                .OrderBy(u => u.FirstName);
        }
        else
        {
            filteredResult = result?.OrderBy(u => u.FirstName);
        }
    }
    string GetRoleBadgeClass(string role)
    {
        return role switch
        {
            "Admin" => "badge bg-success",
            "Teacher" => "badge bg-info",
            "Student" => "badge bg-secondary",

        };
    }
}
