@page "/register"
@using Domain_Layer.CommandOperationResult
@using Domain_Layer.Models.User
@using Shared_Layer.DTO_s.User
@using Shared_Layer.ApiServices.UserCRUD
@inject HttpClient Http
@inject IUserServices ApiService;

<h2>Register User</h2>

<EditForm Model="@model" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputSelect @bind-Value="model.Role" class="form-control mb-3">
        <option value="" disabled selected>Role</option>
        <option value="Teacher">Teacher</option>
        <option value="Student">Student</option>
    </InputSelect>
    <InputText @bind-Value="model.FirstName" placeholder="First Name" class="form-control mb-3" />
    <InputText @bind-Value="model.LastName" placeholder="Last Name" class="form-control mb-3" />
    <InputText @bind-Value="model.Email" placeholder="Email" class="form-control mb-3" />
    <InputText @bind-Value="model.Password" placeholder="Password" class="form-control mb-3" />
    <InputText @bind-Value="model.ConfirmPassword" placeholder="Confirm Password" class="form-control mb-3" />
    <button class="btn btn-primary mt-3">Submit</button>

    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <div class="alert alert-danger">
            <strong>Error:</strong> @errorMessage
        </div>
    }   
</EditForm>

@code {
    private RegisterUserDTO model = new();

    private string? errorMessage;


    protected override async Task OnInitializedAsync()
    {
        // Initialize form state if needed

    }

    private async Task HandleRegistration()
    {
        errorMessage = "";
        try
        {
            await ApiService.RegisterNewUserAsync(model);
            model = new RegisterUserDTO();
           
        }
        catch(Exception ex)
        {
            errorMessage = ex.Message;
        }  
    }
}